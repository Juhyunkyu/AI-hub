name: Test Suite

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  NODE_VERSION: '20'

jobs:
  # Unit and Integration Tests
  test-unit:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  # E2E Tests
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Test Matrix (다양한 환경에서 테스트)
  test-matrix:
    name: Test Matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18', '20']
        exclude:
          # Windows와 macOS에서는 Node 18만 테스트
          - os: windows-latest
            node-version: '20'
          - os: macos-latest
            node-version: '20'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:unit

  # Type Checking
  typecheck:
    name: Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npx tsc --noEmit

  # Linting
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npx prettier --check .

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Build Test
  build:
    name: Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: .next/
          retention-days: 7

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Final Status Check
  test-status:
    name: Test Status
    runs-on: ubuntu-latest
    needs: [test-unit, test-e2e, typecheck, lint, security, build]
    if: always()

    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.test-unit.result }}" == "failure" ]]; then
            echo "Unit tests failed"
            exit 1
          fi
          if [[ "${{ needs.test-e2e.result }}" == "failure" ]]; then
            echo "E2E tests failed"
            exit 1
          fi
          if [[ "${{ needs.typecheck.result }}" == "failure" ]]; then
            echo "Type check failed"
            exit 1
          fi
          if [[ "${{ needs.lint.result }}" == "failure" ]]; then
            echo "Linting failed"
            exit 1
          fi
          if [[ "${{ needs.build.result }}" == "failure" ]]; then
            echo "Build failed"
            exit 1
          fi
          echo "All tests passed successfully!"

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            const testResults = {
              unit: '${{ needs.test-unit.result }}',
              e2e: '${{ needs.test-e2e.result }}',
              typecheck: '${{ needs.typecheck.result }}',
              lint: '${{ needs.lint.result }}',
              build: '${{ needs.build.result }}'
            };

            const statusEmoji = (status) => status === 'success' ? '✅' : '❌';

            const comment = `
            ## 🧪 Test Results

            | Test Type | Status |
            |-----------|--------|
            | Unit & Integration | ${statusEmoji(testResults.unit)} ${testResults.unit} |
            | E2E Tests | ${statusEmoji(testResults.e2e)} ${testResults.e2e} |
            | Type Check | ${statusEmoji(testResults.typecheck)} ${testResults.typecheck} |
            | Lint & Format | ${statusEmoji(testResults.lint)} ${testResults.lint} |
            | Build | ${statusEmoji(testResults.build)} ${testResults.build} |

            ${Object.values(testResults).every(r => r === 'success') ?
              '🎉 All tests passed! Ready to merge.' :
              '⚠️ Some tests failed. Please check the details above.'}
            `;

            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: comment
            });