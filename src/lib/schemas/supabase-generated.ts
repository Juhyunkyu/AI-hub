/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "./../../types/supabase";

export const publicCommentStatusSchema = z.union([
  z.literal("active"),
  z.literal("hidden"),
  z.literal("deleted"),
]);

export const publicPostStatusSchema = z.union([
  z.literal("draft"),
  z.literal("published"),
  z.literal("archived"),
]);

export const publicPostTypeSchema = z.union([
  z.literal("general"),
  z.literal("notice"),
  z.literal("anonymous"),
]);

export const publicReactionTargetSchema = z.union([
  z.literal("post"),
  z.literal("comment"),
]);

export const publicReactionTypeSchema = z.literal("like");

export const publicUserRoleSchema = z.union([
  z.literal("admin"),
  z.literal("user"),
]);

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const publicCategoriesRowSchema = z.object({
  color: z.string().nullable(),
  created_at: z.string(),
  description: z.string().nullable(),
  icon: z.string().nullable(),
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  sort_order: z.number(),
});

export const publicCategoriesInsertSchema = z.object({
  color: z.string().optional().nullable(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  icon: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
  sort_order: z.number().optional(),
});

export const publicCategoriesUpdateSchema = z.object({
  color: z.string().optional().nullable(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  icon: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string().optional(),
  slug: z.string().optional(),
  sort_order: z.number().optional(),
});

export const publicCollectionItemsRowSchema = z.object({
  added_at: z.string(),
  collection_id: z.string(),
  post_id: z.string(),
});

export const publicCollectionItemsInsertSchema = z.object({
  added_at: z.string().optional(),
  collection_id: z.string(),
  post_id: z.string(),
});

export const publicCollectionItemsUpdateSchema = z.object({
  added_at: z.string().optional(),
  collection_id: z.string().optional(),
  post_id: z.string().optional(),
});

export const publicCollectionItemsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("collection_items_collection_id_fkey"),
    columns: z.tuple([z.literal("collection_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("collections"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("collection_items_post_id_fkey"),
    columns: z.tuple([z.literal("post_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("posts"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicCollectionsRowSchema = z.object({
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.string(),
  is_public: z.boolean(),
  name: z.string(),
  owner_id: z.string(),
});

export const publicCollectionsInsertSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  is_public: z.boolean().optional(),
  name: z.string(),
  owner_id: z.string(),
});

export const publicCollectionsUpdateSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  is_public: z.boolean().optional(),
  name: z.string().optional(),
  owner_id: z.string().optional(),
});

export const publicCollectionsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("collections_owner_id_fkey"),
    columns: z.tuple([z.literal("owner_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicCommentsRowSchema = z.object({
  author_id: z.string(),
  body: z.string(),
  created_at: z.string(),
  id: z.string(),
  parent_id: z.string().nullable(),
  post_id: z.string(),
  status: publicCommentStatusSchema,
  updated_at: z.string(),
});

export const publicCommentsInsertSchema = z.object({
  author_id: z.string(),
  body: z.string(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  parent_id: z.string().optional().nullable(),
  post_id: z.string(),
  status: publicCommentStatusSchema.optional(),
  updated_at: z.string().optional(),
});

export const publicCommentsUpdateSchema = z.object({
  author_id: z.string().optional(),
  body: z.string().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  parent_id: z.string().optional().nullable(),
  post_id: z.string().optional(),
  status: publicCommentStatusSchema.optional(),
  updated_at: z.string().optional(),
});

export const publicCommentsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("comments_author_id_fkey"),
    columns: z.tuple([z.literal("author_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("comments_parent_id_fkey"),
    columns: z.tuple([z.literal("parent_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("comments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("comments_post_id_fkey"),
    columns: z.tuple([z.literal("post_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("posts"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicFollowsRowSchema = z.object({
  created_at: z.string(),
  follower_id: z.string(),
  following_user_id: z.string().nullable(),
  id: z.string(),
  tag_id: z.string().nullable(),
  topic_id: z.string().nullable(),
});

export const publicFollowsInsertSchema = z.object({
  created_at: z.string().optional(),
  follower_id: z.string(),
  following_user_id: z.string().optional().nullable(),
  id: z.string().optional(),
  tag_id: z.string().optional().nullable(),
  topic_id: z.string().optional().nullable(),
});

export const publicFollowsUpdateSchema = z.object({
  created_at: z.string().optional(),
  follower_id: z.string().optional(),
  following_user_id: z.string().optional().nullable(),
  id: z.string().optional(),
  tag_id: z.string().optional().nullable(),
  topic_id: z.string().optional().nullable(),
});

export const publicFollowsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("follows_follower_id_fkey"),
    columns: z.tuple([z.literal("follower_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("follows_following_user_id_fkey"),
    columns: z.tuple([z.literal("following_user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("follows_tag_id_fkey"),
    columns: z.tuple([z.literal("tag_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tags"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("follows_topic_id_fkey"),
    columns: z.tuple([z.literal("topic_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("topics"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicMessagesRowSchema = z.object({
  content: z.string(),
  created_at: z.string().nullable(),
  deleted_by_receiver: z.boolean().nullable(),
  deleted_by_sender: z.boolean().nullable(),
  from_user_id: z.string(),
  id: z.string(),
  read: z.boolean().nullable(),
  subject: z.string(),
  to_user_id: z.string(),
  updated_at: z.string().nullable(),
});

export const publicMessagesInsertSchema = z.object({
  content: z.string(),
  created_at: z.string().optional().nullable(),
  deleted_by_receiver: z.boolean().optional().nullable(),
  deleted_by_sender: z.boolean().optional().nullable(),
  from_user_id: z.string(),
  id: z.string().optional(),
  read: z.boolean().optional().nullable(),
  subject: z.string(),
  to_user_id: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const publicMessagesUpdateSchema = z.object({
  content: z.string().optional(),
  created_at: z.string().optional().nullable(),
  deleted_by_receiver: z.boolean().optional().nullable(),
  deleted_by_sender: z.boolean().optional().nullable(),
  from_user_id: z.string().optional(),
  id: z.string().optional(),
  read: z.boolean().optional().nullable(),
  subject: z.string().optional(),
  to_user_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicNotificationsRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  is_read: z.boolean(),
  payload: jsonSchema,
  type: z.string(),
  user_id: z.string(),
});

export const publicNotificationsInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  is_read: z.boolean().optional(),
  payload: jsonSchema.optional(),
  type: z.string(),
  user_id: z.string(),
});

export const publicNotificationsUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  is_read: z.boolean().optional(),
  payload: jsonSchema.optional(),
  type: z.string().optional(),
  user_id: z.string().optional(),
});

export const publicNotificationsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("notifications_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicPostTagsRowSchema = z.object({
  post_id: z.string(),
  tag_id: z.string(),
});

export const publicPostTagsInsertSchema = z.object({
  post_id: z.string(),
  tag_id: z.string(),
});

export const publicPostTagsUpdateSchema = z.object({
  post_id: z.string().optional(),
  tag_id: z.string().optional(),
});

export const publicPostTagsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("post_tags_post_id_fkey"),
    columns: z.tuple([z.literal("post_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("posts"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("post_tags_tag_id_fkey"),
    columns: z.tuple([z.literal("tag_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tags"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicPostTopicsRowSchema = z.object({
  post_id: z.string(),
  topic_id: z.string(),
});

export const publicPostTopicsInsertSchema = z.object({
  post_id: z.string(),
  topic_id: z.string(),
});

export const publicPostTopicsUpdateSchema = z.object({
  post_id: z.string().optional(),
  topic_id: z.string().optional(),
});

export const publicPostTopicsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("post_topics_post_id_fkey"),
    columns: z.tuple([z.literal("post_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("posts"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("post_topics_topic_id_fkey"),
    columns: z.tuple([z.literal("topic_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("topics"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicPostsRowSchema = z.object({
  author_id: z.string(),
  content: z.string().nullable(),
  created_at: z.string(),
  id: z.string(),
  post_type: publicPostTypeSchema,
  source: z.string().nullable(),
  status: publicPostStatusSchema,
  thumbnail: z.string().nullable(),
  title: z.string(),
  updated_at: z.string(),
  url: z.string().nullable(),
});

export const publicPostsInsertSchema = z.object({
  author_id: z.string(),
  content: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  post_type: publicPostTypeSchema.optional(),
  source: z.string().optional().nullable(),
  status: publicPostStatusSchema.optional(),
  thumbnail: z.string().optional().nullable(),
  title: z.string(),
  updated_at: z.string().optional(),
  url: z.string().optional().nullable(),
});

export const publicPostsUpdateSchema = z.object({
  author_id: z.string().optional(),
  content: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  post_type: publicPostTypeSchema.optional(),
  source: z.string().optional().nullable(),
  status: publicPostStatusSchema.optional(),
  thumbnail: z.string().optional().nullable(),
  title: z.string().optional(),
  updated_at: z.string().optional(),
  url: z.string().optional().nullable(),
});

export const publicPostsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("posts_author_id_fkey"),
    columns: z.tuple([z.literal("author_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicProfilesRowSchema = z.object({
  avatar_url: z.string().nullable(),
  bio: z.string().nullable(),
  created_at: z.string(),
  follower_count: z.number(),
  following_count: z.number(),
  id: z.string(),
  links: jsonSchema,
  role: publicUserRoleSchema,
  updated_at: z.string(),
  username: z.string().nullable(),
});

export const publicProfilesInsertSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  bio: z.string().optional().nullable(),
  created_at: z.string().optional(),
  follower_count: z.number().optional(),
  following_count: z.number().optional(),
  id: z.string(),
  links: jsonSchema.optional(),
  role: publicUserRoleSchema.optional(),
  updated_at: z.string().optional(),
  username: z.string().optional().nullable(),
});

export const publicProfilesUpdateSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  bio: z.string().optional().nullable(),
  created_at: z.string().optional(),
  follower_count: z.number().optional(),
  following_count: z.number().optional(),
  id: z.string().optional(),
  links: jsonSchema.optional(),
  role: publicUserRoleSchema.optional(),
  updated_at: z.string().optional(),
  username: z.string().optional().nullable(),
});

export const publicProfilesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("profiles_id_fkey"),
    columns: z.tuple([z.literal("id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicReactionsRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  target_id: z.string(),
  target_type: publicReactionTargetSchema,
  type: publicReactionTypeSchema,
  user_id: z.string(),
});

export const publicReactionsInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  target_id: z.string(),
  target_type: publicReactionTargetSchema,
  type: publicReactionTypeSchema.optional(),
  user_id: z.string(),
});

export const publicReactionsUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  target_id: z.string().optional(),
  target_type: publicReactionTargetSchema.optional(),
  type: publicReactionTypeSchema.optional(),
  user_id: z.string().optional(),
});

export const publicReactionsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("reactions_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicReportsRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  reason: z.string(),
  reporter_id: z.string(),
  resolved_at: z.string().nullable(),
  status: z.string(),
  target_id: z.string(),
  target_type: z.string(),
});

export const publicReportsInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  reason: z.string(),
  reporter_id: z.string(),
  resolved_at: z.string().optional().nullable(),
  status: z.string().optional(),
  target_id: z.string(),
  target_type: z.string(),
});

export const publicReportsUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  reason: z.string().optional(),
  reporter_id: z.string().optional(),
  resolved_at: z.string().optional().nullable(),
  status: z.string().optional(),
  target_id: z.string().optional(),
  target_type: z.string().optional(),
});

export const publicReportsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("reports_reporter_id_fkey"),
    columns: z.tuple([z.literal("reporter_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTagsRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  name: z.string(),
  slug: z.string(),
});

export const publicTagsInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
});

export const publicTagsUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  slug: z.string().optional(),
});

export const publicTopicsRowSchema = z.object({
  category_id: z.string().nullable(),
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.string(),
  name: z.string(),
  slug: z.string(),
});

export const publicTopicsInsertSchema = z.object({
  category_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
});

export const publicTopicsUpdateSchema = z.object({
  category_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string().optional(),
  slug: z.string().optional(),
});

export const publicTopicsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("topics_category_id_fkey"),
    columns: z.tuple([z.literal("category_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("categories"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicMakeAdminArgsSchema = z.object({
  user_id: z.string(),
});

export const publicMakeAdminReturnsSchema = z.undefined();


// ============================================================================
// Custom Enhancements
// ============================================================================

/**
 * Enhanced Profile Schema with custom validations
 */
export const EnhancedProfileSchema = publicProfilesRowSchema?.extend ? publicProfilesRowSchema.extend({
  username: z.string()
    .min(3, '사용자명은 3글자 이상이어야 합니다')
    .max(50, '사용자명은 50글자 이하여야 합니다')
    .regex(/^[a-zA-Z0-9_-]+$/, '사용자명은 영문, 숫자, 언더스코어, 하이픈만 사용 가능합니다')
    .nullable(),
  bio: z.string()
    .max(500, '자기소개는 500글자 이하여야 합니다')
    .nullable(),
}) : z.object({
  id: z.string(),
  username: z.string().nullable(),
  bio: z.string().nullable(),
});

/**
 * Enhanced Post Schema with content validation
 */
export const EnhancedPostSchema = publicPostsRowSchema?.extend ? publicPostsRowSchema.extend({
  title: z.string()
    .min(1, '제목은 필수입니다')
    .max(200, '제목은 200글자 이하여야 합니다'),
  content: z.string()
    .max(10000, '내용은 10,000글자 이하여야 합니다')
    .nullable(),
  url: z.string().url('유효하지 않은 URL 형식입니다').nullable().optional(),
}) : z.object({
  id: z.string(),
  title: z.string(),
  content: z.string().nullable(),
});

/**
 * Enhanced Comment Schema with body validation
 */
export const EnhancedCommentSchema = publicCommentsRowSchema?.extend ? publicCommentsRowSchema.extend({
  body: z.string()
    .min(1, '댓글 내용은 필수입니다')
    .max(2000, '댓글은 2,000글자 이하여야 합니다'),
}) : z.object({
  id: z.string(),
  body: z.string(),
});

/**
 * Query Parameter Schemas
 */
export const PostQuerySchema = z.object({
  page: z.coerce.number().int().min(1).default(1),
  limit: z.coerce.number().int().min(1).max(100).default(10),
  search: z.string().optional(),
  category: z.string().optional(),
  author: z.string().uuid().optional(),
  status: z.enum(['draft', 'published', 'archived']).optional(),
  orderBy: z.enum(['created_at', 'updated_at', 'title']).default('created_at'),
  order: z.enum(['asc', 'desc']).default('desc'),
});

export const UserQuerySchema = z.object({
  page: z.coerce.number().int().min(1).default(1),
  limit: z.coerce.number().int().min(1).max(100).default(10),
  search: z.string().optional(),
  role: z.enum(['user', 'admin']).optional(),
});

// ============================================================================
// Type Exports
// ============================================================================

export type EnhancedProfile = z.infer<typeof EnhancedProfileSchema>;
export type EnhancedPost = z.infer<typeof EnhancedPostSchema>;
export type EnhancedComment = z.infer<typeof EnhancedCommentSchema>;

export type PostQuery = z.infer<typeof PostQuerySchema>;
export type UserQuery = z.infer<typeof UserQuerySchema>;
